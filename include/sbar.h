#if !defined(SBAR_H)
#define SBAR_H

#include <limits.h>

#define SBAR_BLOCK_SIZE_OFFSET(source, offset) ((source) + (offset))

enum sbar_block_size {
	SBAR_BLOCK_SIZE_AUTO = 0,
	SBAR_BLOCK_SIZE_PREV_BLOCK_WIDTH_PLUS = -0x8000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_WIDTH_MINUS = -0x10000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_HEIGHT_PLUS = -0x18000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_HEIGHT_MINUS = -0x20000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_CONTENT_WIDTH_PLUS = -0x28000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_CONTENT_WIDTH_MINUS = -0x30000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_CONTENT_HEIGHT_PLUS = -0x38000000,
	SBAR_BLOCK_SIZE_PREV_BLOCK_CONTENT_HEIGHT_MINUS = -0x40000000,
	SBAR_BLOCK_SIZE_SURFACE_WIDTH_PLUS = -0x48000000,
	SBAR_BLOCK_SIZE_SURFACE_WIDTH_MINUS = -0x50000000,
	SBAR_BLOCK_SIZE_SURFACE_HEIGHT_PLUS = -0x58000000,
	SBAR_BLOCK_SIZE_SURFACE_HEIGHT_MINUS = -0x60000000,
	SBAR_BLOCK_SIZE_OUTPUT_WIDTH_PLUS = -0x68000000,
	SBAR_BLOCK_SIZE_OUTPUT_WIDTH_MINUS = -0x70000000,
	SBAR_BLOCK_SIZE_OUTPUT_HEIGHT_PLUS = -0x78000000,
	SBAR_BLOCK_SIZE_OUTPUT_HEIGHT_MINUS = INT_MIN,
};

enum sbar_pointer_button_state {
	SBAR_POINTER_BUTTON_STATE_RELEASED,
	SBAR_POINTER_BUTTON_STATE_PRESSED,
};

enum sbar_pointer_axis {
	SBAR_POINTER_AXIS_VERTICAL_SCROLL,
	SBAR_POINTER_AXIS_HORIZONTAL_SCROLL,
};

enum sbar_block_type {
	SBAR_BLOCK_TYPE_DEFAULT,
	SBAR_BLOCK_TYPE_SPACER,
	SBAR_BLOCK_TYPE_TEXT,
	SBAR_BLOCK_TYPE_IMAGE,
	SBAR_BLOCK_TYPE_COMPOSITE,
};

enum sbar_block_anchor {
	SBAR_BLOCK_ANCHOR_DEFAULT,
	SBAR_BLOCK_ANCHOR_TOP, // left in horizontal layouts
	SBAR_BLOCK_ANCHOR_RIGHT, // bottom in vertical layouts
	SBAR_BLOCK_ANCHOR_BOTTOM, // right in horizontal layouts
	SBAR_BLOCK_ANCHOR_LEFT, // top in vertical layouts
	SBAR_BLOCK_ANCHOR_CENTER,
	SBAR_BLOCK_ANCHOR_NONE,
};

enum sbar_block_content_anchor {
	SBAR_BLOCK_CONTENT_ANCHOR_DEFAULT,
	SBAR_BLOCK_CONTENT_ANCHOR_LEFT_TOP,
	SBAR_BLOCK_CONTENT_ANCHOR_LEFT_CENTER,
	SBAR_BLOCK_CONTENT_ANCHOR_LEFT_BOTTOM,
	SBAR_BLOCK_CONTENT_ANCHOR_CENTER_TOP,
	SBAR_BLOCK_CONTENT_ANCHOR_CENTER_CENTER,
	SBAR_BLOCK_CONTENT_ANCHOR_CENTER_BOTTOM,
	SBAR_BLOCK_CONTENT_ANCHOR_RIGHT_TOP,
	SBAR_BLOCK_CONTENT_ANCHOR_RIGHT_CENTER,
	SBAR_BLOCK_CONTENT_ANCHOR_RIGHT_BOTTOM,
};

enum sbar_block_content_transform {
	SBAR_BLOCK_CONTENT_TRANSFORM_DEFAULT,
	SBAR_BLOCK_CONTENT_TRANSFORM_NORMAL,
	SBAR_BLOCK_CONTENT_TRANSFORM_90,
	SBAR_BLOCK_CONTENT_TRANSFORM_180,
	SBAR_BLOCK_CONTENT_TRANSFORM_270,
	SBAR_BLOCK_CONTENT_TRANSFORM_FLIPPED,
	SBAR_BLOCK_CONTENT_TRANSFORM_FLIPPED_90,
	SBAR_BLOCK_CONTENT_TRANSFORM_FLIPPED_180,
	SBAR_BLOCK_CONTENT_TRANSFORM_FLIPPED_270,
};

enum sbar_block_type_image_image_type {
	SBAR_BLOCK_TYPE_IMAGE_IMAGE_TYPE_DEFAULT,
	SBAR_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PIXMAP, // format: uint32_t width, uint32_t height, ARGB32 pixels
	SBAR_BLOCK_TYPE_IMAGE_IMAGE_TYPE_PNG,
	SBAR_BLOCK_TYPE_IMAGE_IMAGE_TYPE_RESERVED,
	SBAR_BLOCK_TYPE_IMAGE_IMAGE_TYPE_SVG,
};

enum sbar_surface_cursor_shape {
	SBAR_SURFACE_CURSOR_SHAPE_DEFAULT_,
	// https://wayland.app/protocols/cursor-shape-v1#wp_cursor_shape_device_v1:enum:shape
	SBAR_SURFACE_CURSOR_SHAPE_DEFAULT,
	SBAR_SURFACE_CURSOR_SHAPE_CONTEXT_MENU,
	SBAR_SURFACE_CURSOR_SHAPE_HELP,
	SBAR_SURFACE_CURSOR_SHAPE_POINTER,
	SBAR_SURFACE_CURSOR_SHAPE_PROGRESS,
	SBAR_SURFACE_CURSOR_SHAPE_WAIT,
	SBAR_SURFACE_CURSOR_SHAPE_CELL,
	SBAR_SURFACE_CURSOR_SHAPE_CROSSHAIR,
	SBAR_SURFACE_CURSOR_SHAPE_TEXT,
	SBAR_SURFACE_CURSOR_SHAPE_VERTICAL_TEXT,
	SBAR_SURFACE_CURSOR_SHAPE_ALIAS,
	SBAR_SURFACE_CURSOR_SHAPE_COPY,
	SBAR_SURFACE_CURSOR_SHAPE_MOVE,
	SBAR_SURFACE_CURSOR_SHAPE_NO_DROP,
	SBAR_SURFACE_CURSOR_SHAPE_NOT_ALLOWED,
	SBAR_SURFACE_CURSOR_SHAPE_GRAB,
	SBAR_SURFACE_CURSOR_SHAPE_GRABBING,
	SBAR_SURFACE_CURSOR_SHAPE_E_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_N_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_NE_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_NW_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_S_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_SE_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_SW_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_W_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_EW_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_NS_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_NESW_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_NWSE_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_COL_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_ROW_RESIZE,
	SBAR_SURFACE_CURSOR_SHAPE_ALL_SCROLL,
	SBAR_SURFACE_CURSOR_SHAPE_ZOOM_IN,
	SBAR_SURFACE_CURSOR_SHAPE_ZOOM_OUT,
};

enum sbar_popup_gravity {
	SBAR_POPUP_GRAVITY_DEFAULT,
	SBAR_POPUP_GRAVITY_NONE,
	SBAR_POPUP_GRAVITY_TOP,
	SBAR_POPUP_GRAVITY_BOTTOM,
	SBAR_POPUP_GRAVITY_LEFT,
	SBAR_POPUP_GRAVITY_RIGHT,
	SBAR_POPUP_GRAVITY_TOP_LEFT,
	SBAR_POPUP_GRAVITY_BOTTOM_LEFT,
	SBAR_POPUP_GRAVITY_TOP_RIGHT,
	SBAR_POPUP_GRAVITY_BOTTOM_RIGHT,
};

enum sbar_popup_constraint_adjustment {
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_NONE = 0,
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_SLIDE_X = 1,
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_SLIDE_Y = 2,
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_FLIP_X = 4,
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_FLIP_Y = 8,
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_RESIZE_X = 16,
	SBAR_POPUP_CONSTRAINT_ADJUSTMENT_RESIZE_Y = 32,
};

enum sbar_bar_anchor {
	SBAR_BAR_ANCHOR_DEFAULT,
	SBAR_BAR_ANCHOR_TOP,
	SBAR_BAR_ANCHOR_BOTTOM,
	SBAR_BAR_ANCHOR_LEFT,
	SBAR_BAR_ANCHOR_RIGHT,
};

enum sbar_bar_layer {
	SBAR_BAR_LAYER_DEFAULT,
	SBAR_BAR_LAYER_BACKGROUND,
	SBAR_BAR_LAYER_BOTTOM,
	SBAR_BAR_LAYER_TOP,
	SBAR_BAR_LAYER_OVERLAY,
};

enum sbar_output_transform {
	SBAR_OUTPUT_TRANSFORM_NORMAL,
	SBAR_OUTPUT_TRANSFORM_90,
	SBAR_OUTPUT_TRANSFORM_180,
	SBAR_OUTPUT_TRANSFORM_270,
	SBAR_OUTPUT_TRANSFORM_FLIPPED,
	SBAR_OUTPUT_TRANSFORM_FLIPPED_90,
	SBAR_OUTPUT_TRANSFORM_FLIPPED_180,
	SBAR_OUTPUT_TRANSFORM_FLIPPED_270,
};

#endif // SBAR_H
